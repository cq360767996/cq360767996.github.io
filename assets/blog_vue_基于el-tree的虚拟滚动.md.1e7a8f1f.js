import{o as n,c as s,d as a}from"./app.b78e1e5d.js";const p='{"title":"基于el-tree的虚拟滚动","description":"","frontmatter":{"title":"基于el-tree的虚拟滚动","date":"2021-03-15T00:00:00.000Z","sidebar":"auto","categories":["vue"],"tags":["vue"]},"headers":[{"level":2,"title":"思路","slug":"思路"},{"level":2,"title":"难点","slug":"难点"},{"level":3,"title":"难点一：如何截取片段树","slug":"难点一：如何截取片段树"},{"level":3,"title":"难点二：如何将片段构建成一个片段树","slug":"难点二：如何将片段构建成一个片段树"},{"level":3,"title":"难点三：滚动的实现和优化","slug":"难点三：滚动的实现和优化"},{"level":2,"title":"优化","slug":"优化"},{"level":2,"title":"完整流程","slug":"完整流程"}],"relativePath":"blog/vue/基于el-tree的虚拟滚动.md","lastUpdated":1624256702033}',t={},o=a('<h2 id="思路"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><ol><li>用一个 prop(<code>useVirtualScroll</code>)控制输入确保不会污染 el-tree 源码</li><li>在完整的树上截取一个树片段</li><li>对片段树进行处理，去除所有的 childNodes(称之为<code>releaseNodeLoad</code>)</li><li>使用树片段进行渲染</li><li>处理滚动/展开/收缩/查询，每一次都触发以上步骤 2-4</li></ol><h2 id="难点"><a class="header-anchor" href="#难点" aria-hidden="true">#</a> 难点</h2><ul><li>如何截取片段树</li><li>如何将片段构建成一个片段树</li><li>滚动的实现和优化</li></ul><div class="language-js"><pre><code><span class="token keyword">const</span> ELTree <span class="token operator">=</span> <span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 传入的data</span>\n    childNodes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 实际渲染的树节点</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 树的根节点(完整树)</span>\n  virtualTree<span class="token operator">:</span> <span class="token punctuation">{</span> childNodes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 片段树</span>\n  start<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 起始位置</span>\n  itemHeight<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token comment">// 每一个节点的高度</span>\n  paddingTop<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 虚拟滚动垫的高度</span>\n  boxMaxNumber<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 可视区域可容纳个数</span>\n  totalDisplay<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 完整树中需要显示在页面的节点数</span>\n  counter<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 计数器，记录遍历推入片段树</span>\n  maxStart<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 起始位置的最大值(触底判断)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="难点一：如何截取片段树"><a class="header-anchor" href="#难点一：如何截取片段树" aria-hidden="true">#</a> 难点一：如何截取片段树</h3><p>确定片段树()的起点和终点</p><div class="language-js"><pre><code><span class="token comment">// 1. 页面mounted 2.传入data改变 3. 过滤时</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 滚动时</span>\n<span class="token keyword">function</span> <span class="token function">getStartIndex</span><span class="token punctuation">(</span><span class="token parameter">scrollTop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> startIndex <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>scrollTop <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> startIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> startIndex <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 折叠/展开</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paddingTop <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight<span class="token punctuation">;</span>\n</code></pre></div><p>计算可视区域可容纳个数(boxMaxNumber)</p><ul><li>正常情况 <ul><li>记录所有展开的 key，并推入数组(expandedKeys)</li><li>在展开/折叠的时候维护 expandedKeys</li><li>遍历 expandedKeys，并通过 key 递归该 key 的所有子节点，将满足条件 1.没有 push 过 2.level 大于 1 的 key 推入数组(keys)</li><li>输出<code>keys.length + this.root.childNodes.length</code></li></ul></li><li>过滤条件 <ul><li>只要遍历完整树，选出其中节点的<code>expanded</code>为<code>true</code></li></ul></li></ul><div class="language-js"><pre><code><span class="token comment">// 计算出所有默认展开的keys</span>\n<span class="token keyword">function</span> <span class="token function">calcExpandedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultExpandAll<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nodesMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultExpandedKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKeys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultExpandedKeys<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 展开/折叠维护expandedKeys</span>\n<span class="token keyword">function</span> <span class="token function">handleVirtualTreeExpand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>useVirtualScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> expandedKeys<span class="token punctuation">,</span> key <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span>store<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> nodeKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> index <span class="token operator">=</span> expandedKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>nodeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        expandedKeys<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      expandedKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nodeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>tree<span class="token punctuation">.</span><span class="token function">resetAndSliceTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 获取应该显示在页面上的个数</span>\n<span class="token keyword">function</span> <span class="token function">getTotalDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> nodesMap <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 获取level为1的节点长度</span>\n  <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">pushKey</span> <span class="token operator">=</span> <span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keys<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nodesMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 递归找出所有需要展开的key</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">judgeShow</span><span class="token punctuation">(</span>nodesMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>show<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">pushKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      nodesMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">judgeShow</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        show <span class="token operator">&amp;&amp;</span> <span class="token function">pushKey</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> len <span class="token operator">+</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="难点二：如何将片段构建成一个片段树"><a class="header-anchor" href="#难点二：如何将片段构建成一个片段树" aria-hidden="true">#</a> 难点二：如何将片段构建成一个片段树</h3><div class="language-js"><pre><code><span class="token comment">// 将拿到的树节点放入虚拟滚动树中</span>\n<span class="token keyword">function</span> <span class="token function">setTreeNode</span><span class="token punctuation">(</span><span class="token parameter">targetNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 能否找到父级</span>\n  <span class="token keyword">let</span> canFindParent <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> childNodes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>virtualTree<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> childNodes <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>\n    <span class="token comment">// 找到父节点</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> targetNode<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      canFindParent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token keyword">const</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>nodeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token comment">// 没有缓存过</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>childrenMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 缓存原节点数据</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>childrenMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span>\n        node<span class="token punctuation">.</span>childNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>traverse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>traverse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 找不到就直接推进去</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canFindParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    childNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">releaseNodeLoad</span><span class="token punctuation">(</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="难点三：滚动的实现和优化"><a class="header-anchor" href="#难点三：滚动的实现和优化" aria-hidden="true">#</a> 难点三：滚动的实现和优化</h3><div class="language-js"><pre><code><span class="token comment">// 滚动事件</span>\n<span class="token keyword">function</span> <span class="token function">handleScroll</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>useVirtualScroll<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>scrollTop <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> scrollTop <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateVisibleArea</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 更新可视区域</span>\n<span class="token keyword">function</span> <span class="token function">updateVisibleArea</span><span class="token punctuation">(</span><span class="token parameter">scrollTop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStartIndex</span><span class="token punctuation">(</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>paddingTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetAndSliceTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="优化"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><blockquote><p>问题：虚拟滚动树保留了对 childNodes 的引用，因此在 el-tree 构建过程中，会去生成对应节点，节点太多会很卡</p></blockquote><blockquote><p>解决方案：在构建完成虚拟滚动树之后，卸载所有 childNodes，并存入 map 中，<code>{nodeId: childNodes}</code>，在初始化的时候重新挂载到完整树上</p></blockquote><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">releaseNodeLoad</span><span class="token punctuation">(</span><span class="token parameter">childNodes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>boxMaxNumber <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalDisplay<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">traverse</span> <span class="token operator">=</span> <span class="token parameter">node</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> childNodes<span class="token punctuation">,</span> expanded<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> key <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>nodeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>childrenMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> childNodes<span class="token punctuation">;</span>\n        node<span class="token punctuation">.</span>childNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>traverse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    childNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>traverse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="完整流程"><a class="header-anchor" href="#完整流程" aria-hidden="true">#</a> 完整流程</h2><div class="language-"><pre><code>初始化相关的数值(resetVirtualTree) =&gt; 将树切片(sliceTree) =&gt; 将切出来的每个节点放入虚拟滚动树(setTreeNode) =&gt; 去除节点包袱(releaseNodeLoad)\n\nmounted/data改变/展开/折叠/过滤文本/滚动 执行上述操作\n</code></pre></div>',21);t.render=function(a,p,t,e,c,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
