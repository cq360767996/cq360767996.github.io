import{o as n,c as a,d as s}from"./app.9c3074ab.js";const e='{"title":"webpack优化","description":"","frontmatter":{"title":"webpack优化","date":"2020-09-09T00:00:00.000Z","sidebar":"auto","categories":["webpack"],"tags":["webpack"]},"headers":[{"level":2,"title":"webpack 构建流程","slug":"webpack-构建流程"},{"level":2,"title":"webpack 优化方案","slug":"webpack-优化方案"},{"level":3,"title":"查看 webpack 性能问题","slug":"查看-webpack-性能问题"},{"level":3,"title":"优化 Loader 配置","slug":"优化-loader-配置"},{"level":3,"title":"DLL Plugin Or Externals","slug":"dll-plugin-or-externals"},{"level":3,"title":"多进程","slug":"多进程"},{"level":3,"title":"合理利用缓存","slug":"合理利用缓存"},{"level":3,"title":"Code Splitting(代码分割)","slug":"code-splitting-代码分割"},{"level":3,"title":"noParse","slug":"noparse"},{"level":3,"title":"IgnorePlugin","slug":"ignoreplugin"}],"relativePath":"blog/webpack/webpack优化.md","lastUpdated":1624244342115}',p={},t=s('<h2 id="webpack-构建流程"><a class="header-anchor" href="#webpack-构建流程" aria-hidden="true">#</a> webpack 构建流程</h2><ul><li>初始化参数：从配置文件、Shell 命令中读取合并相关参数</li><li>初始化编译：使用上述的参数来实例化一个 Compiler 对象，注册插件并传入实例中</li><li>生成依赖图：从 entry 出发，调用所有配置的 loader 来对模块进行翻译，递归解析所有依赖，使用 AST 引擎生成抽象语法树(AST)</li><li>seal 输出资源：根据入口和模块的依赖关系，组装成一个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这是能修改输出内容的最后机会</li><li>emit 输出完成：确定输出文件路径和文件名，直接写入文件系统</li></ul><h2 id="webpack-优化方案"><a class="header-anchor" href="#webpack-优化方案" aria-hidden="true">#</a> webpack 优化方案</h2><h3 id="查看-webpack-性能问题"><a class="header-anchor" href="#查看-webpack-性能问题" aria-hidden="true">#</a> 查看 webpack 性能问题</h3><ul><li>使用<code>speed-measure-webpack-plugin</code>测量打包速度</li><li>使用<code>webpack-bundle-analyzer</code>进行体积分析</li></ul><h3 id="优化-loader-配置"><a class="header-anchor" href="#优化-loader-配置" aria-hidden="true">#</a> 优化 Loader 配置</h3><ul><li>优化搜索时间</li><li>缩小文件搜索范围</li><li>减少不必要的编译工作</li></ul><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        <span class="token comment">// 如果项目源码中只有.js文件，就不要写成/\\jsx?$/，以提升正则表达式的性能</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token comment">// babel-loader支持缓存转换出的结果，通过cacheDirectory选项开启</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader?cacheDirectory&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token comment">// 只对src目录中的文件采用 babel-loader</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment">// 使用resolve.alias把原导入路径映射成一个新的导入路径，减少耗时的递归解析操作</span>\n        alias<span class="token operator">:</span> <span class="token punctuation">{</span>\n          react<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./node_modules/react/dist/react.min.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// 让 Webpack 忽略对部分没采用模块化的文件的递归解析处理</span>\n        noParse<span class="token operator">:</span> <span class="token string">&#39;/jquery|lodash/&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="dll-plugin-or-externals"><a class="header-anchor" href="#dll-plugin-or-externals" aria-hidden="true">#</a> DLL Plugin Or Externals</h3><p>目的是在处理第三方库的时候尽量少的打包</p><ul><li>Externals 的使用方式是直接配置 Externals 选项，当 webpack 打包时，遇到所配置的 Externals，直接跳过</li><li>DllPlugin 和 DllReferencePlugin <ul><li>新建一个 webpack 配置文件，用来构建第三方包</li><li>配置 DllPlugin，传入 context、name 和 path，配置好打包的 output，运行一次打包</li><li>在你的业务代码的配置文件中，配置 DllReferencePlugin，context、name、manifest 等</li></ul></li></ul><h3 id="多进程"><a class="header-anchor" href="#多进程" aria-hidden="true">#</a> 多进程</h3><p>一些开销特别大的 loader 可以放进一个单独的线程中，但是会有一些限制，比如无法使用 loader 的 api，而且也拿不到 webpack 的配置项</p><ul><li>thread-loader(推荐使用)</li><li>happypack(不怎么维护了)</li></ul><div class="language-js"><pre><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  module<span class="token operator">:</span> <span class="token punctuation">{</span>\n    rules<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        use<span class="token operator">:</span> <span class="token punctuation">[</span>\n          <span class="token string">&#39;thread-loader&#39;</span><span class="token punctuation">,</span>\n          <span class="token comment">// your expensive loader (e.g babel-loader)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="合理利用缓存"><a class="header-anchor" href="#合理利用缓存" aria-hidden="true">#</a> 合理利用缓存</h3><p>缓存可以解决除第一次打包之外的速度，效果比较明显的就是 hard-source-webpack-plugin</p><h3 id="code-splitting-代码分割"><a class="header-anchor" href="#code-splitting-代码分割" aria-hidden="true">#</a> Code Splitting(代码分割)</h3><ul><li>配置多 entry 页面</li><li>使用 SplitChunksPlugin 进行重复数据删除和提取</li><li>使用 Dynamic Import 指定模块拆分，并且可以结合 preload、prefetch 做更多用户体验上的优化</li></ul><h3 id="noparse"><a class="header-anchor" href="#noparse" aria-hidden="true">#</a> noParse</h3><p>对于某些没有第三方引用的包，可以使用 module.noParse 来提升构建速度</p><h3 id="ignoreplugin"><a class="header-anchor" href="#ignoreplugin" aria-hidden="true">#</a> IgnorePlugin</h3><p>比如忽略 moment 的本地化内容</p><ul><li>requestRegExp 匹配(test)资源请求路径的正则表达式。</li><li>contextRegExp （可选）匹配(test)资源上下文（目录）的正则表达式。</li></ul><div class="language-js"><pre><code><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span>requestRegExp<span class="token punctuation">,</span> <span class="token punctuation">[</span>contextRegExp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 忽略 moment 的本地化内容</span>\n<span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.\\/locale$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">moment$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',25);p.render=function(s,e,p,l,o,c){return n(),a("div",null,[t])};export default p;export{e as __pageData};
